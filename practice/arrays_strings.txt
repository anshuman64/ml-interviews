""" Ex: 16
    Source: CTCI pg 150
    Description: Sort an array of strings such that anagrams are next to each other
    Time:  O(n(slogs))

    Example: ['friend', 'listen', 'fired', 'silent'] -> ['friend', 'fired', 'listen', 'silent']
    """

    def GroupAnagrams(strings):
        groups = {}

        for string in strings:
            sorted_string = ''.join(sorted(string)) # O(slogs)
            if sorted_string not in groups:
                groups[sorted_string] = []
            groups[sorted_string].append(string)

        sorted_list = []
        for group in groups: # O(n)
            sorted_list.extend(groups[group])

        return sorted_list

""" Ex: 15
    Source: CTCI pg 149
    Description: Given two sorted arrays, merge B into A
    Time:  O(A+B)
    """

    def SortedMerge(A, B):
        a = len(A)-1
        b = len(B)-1
        c = len(A)-1

        # Determine first element not None
        for ele in A[::-1]:
            if ele is not None:
                break

            a -= 1

        # Fill A backwards
        while c >= 0 and b >= 0 and a >= 0:
            if B[b] > A[a]:
                A[c] = B[b]
                b -= 1
            else:
                A[c] = A[a]
                a -= 1

            c -= 1

        # Fill remaining elements of B
        while b >= 0:
            A[c] = B[b]
            b -= 1

        return A

"""Ex: 14
    Source: TBP Mock Interview (Caroline)

    Description: Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

    Example 1:
    Input: s = "leetcode"
    Output: 0
    
    Example 2:
    Input: s = "loveleetcode"
    Output: 2
    
    Example 3:
    Input: s = "aabb"
    Output: -1
    
    Constraints:
    - 1 <= s.length <= 105
    - s consists of only lowercase English letters.
    """

    class Solution:
        def firstUniqChar(self, s: str) -> int:
            # Handle empty case
            if len(s) < 1:
            return -1
            
            # Initialize two maps
            m = {} # Holds count of chars {a: 2, b: 2}
            idx_m = {} # Holds idx of chars {a: 0, b: 2}
            
            # Loop through string
            for i, c in enumerate(s): # O(n)
            # If the char not in  map
            if c not in m: # O(1)
                # Add its count + lowest idx
                m[c] = 1
                idx_m[c] = i
            else:
                # Increase count
                m[c] += 1
                
            # Create a list of non_repeated
            non_repeated = []
            for c in m: # O(n)
                if m[c] < 2:
                    # Add chars that are not repeated
                    non_repeated.append(c)
                
            # If there were no non_repeated chars
            if len(non_repeated) == 0:
                # Return -1
                return -1
            else:
                # Find the lowest idx 
                lowest_idx = len(s)
                for c in non_repeated: # O(n)
                    if idx_m[c] < lowest_idx:
                        lowest_idx = idx_m[c]
            
            return s[lowest_idx]

""" Ex: 13
    Source: HKN Interview Problem #2

    Description:
        Sometimes the path isn’t the most simple for instance: 
        If we are at directory: root/dirA/dirB and we run cd ../dirC///../.. That is the same at running cd ../dirC

        Assuming a path is valid, write it in the most simplified form
        Clarification:
        -no need to consider root directory for this
        -Assume for the sake of this question no two directories are named the same, for instance you won’t have a path dirA/dirB/dirA

    Scenarios:
    - .. after folderName: pop
    - .. not after folderName: push
    - folderName: push
    """

    def simplified_path(path):
        path += '/'
        stack = []
        cur_folder_name = ''

        for i in range(len(path)):
            if path[i] != '.' and path[i] != '/':
                # If alphanumeric, add to cur_folder_name
                cur_folder_name += path[i]
            
            elif path[i] == '/':
                # If last element was a folder, add to stack
                if len(cur_folder_name) > 0:
                    stack.append(cur_folder_name)
                    cur_folder_name = ''
                
                # Else if last element was '../'
                elif i > 1 and path[i-2:i] == '..':
                    # The stack is empty or has two dots
                    if len(stack) == 0 or stack[len(stack)-1] == "../":
                        # Add to the stack
                        stack.append('../')
                    # If stack has a folder
                    else:
                        stack.pop()
        
        return stack
            

    print(simplified_path('../'))
    print(simplified_path('../dirC//'))
    print(simplified_path('../dirC///../..'))

""" Ex: 12
    Source: HKN Interview Problem #1

    Description:
        For the command “cd”:
        -".." means to go up a directory, . means the current directory, / means to get the subdirectory
        -For a valid path there can't be more than two .. before a /, and any number of /'s has the same function as one
        for instance ./././folderA, ../../folderB, folderB/../.././////folderA,  is valid
        -All paths we give would start with a . or a folder name
        -all folder names are good: ie it would not have punctuation (/ . , etc)

        Write a function to check if a path is valid

    Cases:
        - ./././folderA
        - ../../folderB
        - folderB/../.././////folderA
        - (false) .../
        - (false) /...
        - (false) /__
    """

    def is_path_valid(path):
        cur_num_dots = 0
        
        for i in range(len(path)):
            if path[i] == '.':
                cur_num_dots += 1

                if cur_num_dots > 2:
                    return False
            else:
                cur_num_dots = 0

        return True

    assert is_path_valid('./././folderA')
    assert is_path_valid('../../folderB')
    assert is_path_valid('folderB/../.././////folderA')
    assert not is_path_valid('.../')
    assert not is_path_valid('/...')

    print("All test cases passed.")

""" Ex: 11
    REMEMBER:
        - Rotation of string * 2
        - Check answers before beginning to code

    Source: CTCI Practice 1.9
    Description: With only one call to is_substring, determine if one string is a rotation of another

    Example: 
        - "waterbottle", "erbottlewat"
        - "aaa", "aaa"
        - "baa", "aba"
        - "abcabd", "bdabca"
    Questions: blank spaces, capitals

    Idea: Two pointers
        - Pointer 1 at start of string1
        - Pointer 2 at start of string2
        - Step 1: Move pointer2 until you hit pointer1 value
            - If not until end of pointer1, not a rotation
            - Save index of match
        - Step 2: Move both pointers to see if they continue to match
            - If yes until end of pointer2:
                - Check if is_substring for the rest of it 
            - If no, 
                - move pointer2 back to saved index & restart Step 1 with current pointer1 indexs

    Time: O(n), Space: O(n)
    """
    # Clever method:
    def is_rotation(string1, string2):
        if len(string1) != len(string2):
            return False
        
        return string2 in return

    # STUPID
    def is_rotation_helper(string1, string2, i, j, N):
        while j < N:
            if string1[i] == string2[j]:
                return j
            else:
                j += 1
        
        return N

    def is_rotation(string1, string2):
        # If not the same length, return False
        if len(string1) != len(string2):
            return False
        
        # Initialize variables
        N = len(string1)
        i = 0
        j = 0

        # While indices are valid
        while i < N and j < N:
            # Find the spot in string2 that matches the start of string1
            saved_j = is_rotation_helper(string1, string2, i, j, N)

            # Determine if rest of string2 matches string1
            j = saved_j + 1
            i += 1
            while i < N and j < N:
                # If the strings match, continue
                if string1[i] == string2[j]:
                    i += 1
                    j += 1
                # If the strings stop matching, then restart the process
                else:
                    i = 0
                    j = saved_j + 1
                    break

        # If we reached the end of string2, determine if the rest matches
        if j == N:
            if string2[:saved_j] == string1[N-saved_j:]:
                return True
        
        return False

""" Ex: 10
    REMEMBER:
        - Double check each line of code!
        - Problem might be easier than you think

    Source: CTCI Practice 1.8
    Description: If element in MxN matrix is 0, whole row & column set to zero

    Naive Idea:
        - Look through whole matrix O(mn)
            - Identify row & columns that have 0
        - Loop through rows O(a)
            - set indices to 0 O(m)
        - Loop through columns O(b)
            - set indices to 0 O(n)
        Time: O(mn + am + bn) -> O(mn + m^2 + n^2)

    Better Idea:
        - Look through whole matrix O(mn)
            - Identify row & columns that have 0
        - Look through matrix again O(mn)
            - Determine if element should be 0
        Time: O(mn)

    Small Optimizations:
        - If row or column is 0, don't have to look again
        - Skip rows & columns that have already been identified as 0

    Time: O(mn), Auxiliary Space: O(m + n)
    """

    def set_zeros(mat):
    
        # TODO: error checking 

        M = len(mat)
        N = len(mat[0])

        zero_rows = [False] * M
        zero_cols = [False] * N

        for i in range(M):
            for j in range(N):
                if mat[i][j] == 0:
                    zero_rows[i] = True
                    zero_cols[j] = True
                    break
        
        for i in range(M):
            for j in range(N):
                if zero_rows[i] or zero_cols[j]:
                    mat[i][j] = 0
        
        return mat

""" Ex: 9
    REMEMBER: Transpose & swap is same as rotate

    Source: CTCI Practice 1.7
    Description:
        Given: NxN matrix
        Goal: rotate image in 90 degrees
        Constraints: in-place 

    1 2  ->  3 1
    3 4      4 2
    00 -> 01, 01 -> 11, 11 -> 10, 10 -> 00

    Not in-place:
    - First row = last column
    - Second row = second to last column
    """
    
    def rotate_image(mat):
        # Time: O(n^2), Auxiliary Space: O(n^2)
        N = len(mat)
        new_mat = [[None for _ in range(N)] for _ in range(N)]

        for i in range(N):
            for j in range(N):
                new_mat[j][N-i-1] = mat[i][j]

        return new_mat

    def rotate_image_inplace(mat):
        # Time: O(n^2), Auxiliary Space: O(1)
        N = len(mat)

        for j in range(N // 2):
            for i in range(j, N-1-j):
                temp = mat[i+j][N-1-j]
                mat[i+j][N-1-j] = mat[j][i+j]
                mat[j][i+j] = mat[N-1-i-j][j]
                mat[N-1-i-j][j] = mat[N-1-j][N-1-i-j]
                mat[N-1-j][N-1-i-j] = temp

        return mat

    def rotate_image_transpose(mat):
        # Time: O(n^2), Auxiliary Space: O(1)
        N = len(mat)

        # transpose
        for i in range(N):
            for j in range(i):
                mat[i][j], mat[j][i] = mat[j][i], mat[i][j]
    
        # swap columns
        for i in range(N):
            for j in range(N // 2):
                mat[i][j], mat[i][N-j-1] = mat[i][N-j-1], mat[i][j]

        return(mat)

""" Ex: 8
    REMEMBER: 
    - Read the problem very, very carefully! Don't make assumptions on what they're expecting.
    - Check every line of code for errors
    
    Source: CTCI Practice 1.6
    Description: Compress string with counts 
    Example: "aaabbcccaa" -> "a3b2c3a2"

    Idea:
    - Loop through each char:
        - If next char is different:
            - Add char & count to new string

    Time: O(n), Space: O(1)
    """

    def compress_string(string):
        new_str_list = []

        cur_char_count = 0
        for i in range(len(string)):
            cur_char_count += 1
            if i == len(string) - 1 or string[i+1] != string[i]:
                new_str_list.append(string[i])
                new_str_list.append(str(cur_char_count))
                cur_char_count = 0

        new_str = ''.join(new_str_list)
        if len(new_str) >= len(string):
            return string

        return new_str
            
""" Ex: 7
    REMEMBER:
        - Incorporate all while loop end cases
        - Hashtable does not account for order 
        - Be careful about which index to increment

    Source: CTCI Practice 1.5
    Description: Given two strings, determine if they are <= 1 edit away (insert, delete, replace)

    Examples: 
        - pale, ple = True
        - pales, pale = True 
        - pale, bale = True 
        - pale, bake = True

    Two edits:
        - I - len + 1, 1 char diff 
        - D - len - 1, 1 char diff 
        - R - len, 1 char diff

        - II - len + 2
        - ID = replace 
        - IR - len + 1, 2 char diff
        - DD - len - 2
        - DR - len - 1, 2 char diff
        - RR - len, 2 char diff

    Track: Length, # of chars differ 
    Idea: two pointers 

    Time: O(n), Space: O(n)
    """

    def is_one_away(string1, string2):
        len1 = len(string1)
        len2 = len(string2)
        
        if len1 > len2:
            len_diff = len1 - len2
        else:
            len_diff = len2 - len1

        if len_diff > 1:
            return False 

        i = 0
        j = 0

        char_diff = 0
        while i < len1 and j < len2:
            if string1[i] != string2[j]:
                char_diff += 1
                if char_diff > 1:
                    return False
                
                # Replace
                if len1 == len2:
                    i += 1
                    j += 1
                # Deletion
                elif len1 > len2:
                    i += 1
                # Insertion
                else:
                    j += 1
            else:
                i += 1
                j += 1
        
        return True

""" Ex: 6
    REMEMBER:
        - Only need to know if it is odd or even
        - Can check as you go - might be slower depending on n
    
    Source: CTCI Practice 1.4
    Description: Given a string, determine if it is a permutation of a palindrome

    Questions: blank spaces, capital characters, defined character set

    Example: "racecar", "bobbob"
    Palindrome: characters of multiple two. At most one character with % 2 = 1.

    Idea: 
    - Initialize hashmap
    - For each character in string O(n):
        - Increment count of char 
    - Loop through hashmap
        - Determine if more than one char with % 2 = 1

    Time: O(n), Space: O(n)
    """

    def is_palindrome_permutation(string):
        char_dict = {}

        for c in string:
            if c not in char_dict:
                char_dict[c] = 1
            else:
                char_dict[c] += 1

        outlier_count = 0
        for c in char_dict:
            if char_dict[c] % 2 == 1:
                outlier_count += 1
                if outlier_count > 1:
                    return False 

        return True

""" Ex: 5
    REMEMBER: 
        - Don't assume blank spaces at end is the right amount
        - Python string is immutable
        - Ask if in-place or copy
    
    Source: CTCI Practice 1.3
    Description: Replace all spaces in string with %20. Assume sufficient space at end of string & given true length of string.

    Example: "Mr John Smith    ", 13 -> "Mr%20John%20Smith"

    Idea: Two pointers starting at the end of the string 
    Pointer 1: Actual end
    Pointer 2: End of real string 
    Every time there is a space, replace with %20

    Time: O(n), Space: O(n)
    """

    def urlify(string, length):
        string = list(string) # REMEMBER: Python doesn't allow string assignment
        full_length = len(string)

        i = length - 1
        j = full_length - 1

        while (i >= 0):
            if string[i] == ' ':
                string[j] = '0'
                string[j-1] = '2'
                string[j-2] = '%'

                i -= 1
                j -= 3
            else:
                string[j] = string[i]
                i -= 1
                j -= 1

        return ''.join(string)

""" Ex: 4
    Source: CTCI Practice 1.2
    Description: Given two strings, determine if one is a permutation of the other

    Example: "apple" "ppael", "" "c"
    **Questions: blank spaces, capitalization**

    Permutation = same number of each character

    Idea:
    - Check if length is the same
    - Initialize hashtable
    - Loop through first string O(n)
        - keeping count of chars in hashtable O(1)
    - Loop through second string O(n)
        - check if in hashtable
        - decrease count of chars in hashtable 
    - Loop through hashtable and make sure there are no positive counts O(n)

    Time: O(n), Space: O(n)
    """
    def is_permutation(string1, string2):
        if len(string1) != len(string2):
            return False
        
        char_dict = {}

        for c in string1:
            if c not in char_dict:
                char_dict[c] = 1
            else:
                char_dict[c] += 1
        
        for c in string2:
            if c not in char_dict:
                return False
            else:
                char_dict[c] -= 1
                if char_dict[c] < 0:
                    return False
        
        for c in char_dict:
            if char_dict[c] > 0:
                return False

        return True

""" Ex: 3
    Tags: -
    Source: CTCI Practice Ch1.1
    Description: Determine if string has all unique characters

    Examples: '', 'c', 'ca', 'cac', 'apple 45q3zxc asdf  '
    Questions: Do spaces count? 

    Naive Solution: 
    - Have two pointers
    - For each character O(n):
        - loop through rest of character O(n): 
            - see if there is a match
    - return False 
    Time: O(n^2), Space: O(n)

    Better Solution:
    - Create a hashtable
    - For each character O(n):
        - check if character in hashtable O(1)
            - if yes, return True
            - if no, add to hashtable O(1)
    - return False

    Time: O(n), Space: O(n)
    """

    def is_unique(input_string):
        hash_table = set()

        for c in input_string:
            if c in hash_table:
                return False
            else:
                hash_table.add(c)
        
        return True

""" *Ex: 2
    Tags: STUDYGUIDE
    Source: CTCI pg 51
    Description: Print all permutations of string
    Time:  O(N * N!) - N! permutations, print = O(N) 
    """
    def permutation(s : str, prefix : str = ""):
        if (len(s) == 0):
            print(prefix)
        else:
            for i in range(len(s)):
                remaining = s[:i] + s[i+1:]
                permutation(remaining, prefix + s[i])
            
""" Ex: 1
    Tags: STUDYGUIDE
    Source: CTCI pg 48
    Description: Reverse an array in place
    Time:  O(N)
    Space: O(N)
    """
    def reverse(arr : list) -> list:
        for i in range(len(arr)/2):
            other_idx = len(arr) - i - 1
            arr[i], arr[other_idx] = arr[other_idx], arr[i]

        return arr